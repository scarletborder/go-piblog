services:
  # 自定义alpine Image
  custom-alpine:
    build: 
      context: .
      dockerfile: ./server/alpine/Dockerfile
    image: my-custom-alpine  # 构建完成后的镜像名称

  # Redis 服务
  redis:
    image: redis:7.2.6-alpine
    container_name: redis_container
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data   # 持久化 Redis 数据
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  # MongoDB 服务
  mongodb:
    image: mongo:8.0.1
    container_name: mongodb_container
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - ./data/mongo:/data/db  # 持久化 MongoDB 数据
      - ./server/mongo/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    healthcheck:
      test: ["CMD", "mongod", "--sysinfo"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  # Etcd 服务
  etcd:
    image: bitnami/etcd:3.5.16
    container_name: etcd_container
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      # etcd 客户端访问URL
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
      - ETCD_DATA_DIR=/data/etcd  # 设置数据目录
    ports:
      - "2379:2379"
      - "2380:2380"
    volumes:
      - ./data/etcd:/data/etcd   # 持久化 etcd 数据

  # 第一个 Go 应用程序
  biz:
    # image: my-custom-alpine  # 基于上面定义的镜像
    build: ./server/src/biz
    container_name: biz_container
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      etcd:
        condition: service_started
      custom-alpine:
        condition: service_started
    ports:
      - "8888:8888"
    volumes:
      - ./server/src/biz/etc:/usr/src/app/etc  # 将宿主机的配置文件挂载到容器中
    environment:
      CONFIG_PATH: "/usr/src/app/etc/biz-api.yaml"  # 如果你的应用通过环境变量加载配置
    command: ["./biz", "-f", "/usr/src/app/etc/biz-api.yaml"]

  # Nginx前端
  frontend:
    build: 
      context: ./frontend/piblog
      dockerfile: Dockerfile.test
    container_name: frontend_container
    depends_on:
      - biz
      - certbot
    ports: 
    - "80:80"
    profiles: ["test"]
    restart: always
    volumes:
    - ./frontend/nginx/nginx.conf:/etc/nginx/conf.d/default.conf

  certbot:
    image: certbot/certbot:v2.11.0
    volumes:
    - ./frontend/letsencrypt:/etc/letsencrypt  # 挂载证书目录
    - ./frontend/nginx/certbot/www:/var/www/certbot  # 用于 certbot 验证
    environment:
      - LETSENCRYPT_HOST=scarletborder.cn
      - LETSENCRYPT_EMAIL=baishuibeef@gmail.com
    entrypoint: >
      sh -c "trap exit TERM; 
      while :; do
        if [ -z \"$LETSENCRYPT_EMAIL\" ]; then
          echo 'Error: LETSENCRYPT_EMAIL is not set!';
          exit 1;
        fi;
        certbot certonly --webroot -w /var/www/certbot --email $LETSENCRYPT_EMAIL --agree-tos --no-eff-email -d $LETSENCRYPT_HOST && break;
        sleep 12h;
      done"
    restart: always

  frontend-release:
    build: 
      context: ./frontend/piblog
      dockerfile: Dockerfile.release
    container_name: frontend_container
    depends_on:
      - biz
    ports: 
    - "80:80"
    - "443:443"
    profiles: ["release"]
    restart: always
    volumes:
    - ./frontend/nginx/nginx_release.conf:/etc/nginx/conf.d/default.conf
    - ./frontend/letsencrypt:/etc/letsencrypt  # 挂载证书目录
    - ./frontend/nginx/certbot/www:/var/www/certbot  # 用于 certbot 验证



  # 第二个 Go 应用程序
  host:
    # image: my-custom-alpine  # 基于上面定义的镜像
    build: ./server/src/host
    container_name: host_container
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      etcd:
        condition: service_started
      custom-alpine:
        condition: service_started
    ports:
      - "8081:8081"
    volumes:
      - ./server/src/host/etc:/usr/src/app/etc  # 将宿主机的配置文件挂载到容器中
    environment:
      CONFIG_PATH: "/usr/src/app/etc/host.yaml"  # 如果你的应用通过环境变量加载配置
    command: ["./host", "-f", "/usr/src/app/etc/host.yaml"]
networks:
  default:
    driver: bridge