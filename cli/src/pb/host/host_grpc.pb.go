// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: host.proto

package host

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Host_CreateBlog_FullMethodName = "/host.Host/CreateBlog"
	Host_UpdateBlog_FullMethodName = "/host.Host/UpdateBlog"
	Host_DeleteBlog_FullMethodName = "/host.Host/DeleteBlog"
	Host_UploadPic_FullMethodName  = "/host.Host/UploadPic"
	Host_DeletePic_FullMethodName  = "/host.Host/DeletePic"
)

// HostClient is the client API for Host service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostClient interface {
	CreateBlog(ctx context.Context, in *UploadBlogReq, opts ...grpc.CallOption) (*UploadBlogResp, error)
	UpdateBlog(ctx context.Context, in *UploadBlogReq, opts ...grpc.CallOption) (*UploadBlogResp, error)
	DeleteBlog(ctx context.Context, in *DeleteBlogReq, opts ...grpc.CallOption) (*DeleteBlogResp, error)
	UploadPic(ctx context.Context, in *UploadPicReq, opts ...grpc.CallOption) (*UploadPicResp, error)
	DeletePic(ctx context.Context, in *DeleteBlogReq, opts ...grpc.CallOption) (*DeletePicResp, error)
}

type hostClient struct {
	cc grpc.ClientConnInterface
}

func NewHostClient(cc grpc.ClientConnInterface) HostClient {
	return &hostClient{cc}
}

func (c *hostClient) CreateBlog(ctx context.Context, in *UploadBlogReq, opts ...grpc.CallOption) (*UploadBlogResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadBlogResp)
	err := c.cc.Invoke(ctx, Host_CreateBlog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostClient) UpdateBlog(ctx context.Context, in *UploadBlogReq, opts ...grpc.CallOption) (*UploadBlogResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadBlogResp)
	err := c.cc.Invoke(ctx, Host_UpdateBlog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostClient) DeleteBlog(ctx context.Context, in *DeleteBlogReq, opts ...grpc.CallOption) (*DeleteBlogResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBlogResp)
	err := c.cc.Invoke(ctx, Host_DeleteBlog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostClient) UploadPic(ctx context.Context, in *UploadPicReq, opts ...grpc.CallOption) (*UploadPicResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadPicResp)
	err := c.cc.Invoke(ctx, Host_UploadPic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostClient) DeletePic(ctx context.Context, in *DeleteBlogReq, opts ...grpc.CallOption) (*DeletePicResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePicResp)
	err := c.cc.Invoke(ctx, Host_DeletePic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostServer is the server API for Host service.
// All implementations must embed UnimplementedHostServer
// for forward compatibility.
type HostServer interface {
	CreateBlog(context.Context, *UploadBlogReq) (*UploadBlogResp, error)
	UpdateBlog(context.Context, *UploadBlogReq) (*UploadBlogResp, error)
	DeleteBlog(context.Context, *DeleteBlogReq) (*DeleteBlogResp, error)
	UploadPic(context.Context, *UploadPicReq) (*UploadPicResp, error)
	DeletePic(context.Context, *DeleteBlogReq) (*DeletePicResp, error)
	mustEmbedUnimplementedHostServer()
}

// UnimplementedHostServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHostServer struct{}

func (UnimplementedHostServer) CreateBlog(context.Context, *UploadBlogReq) (*UploadBlogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlog not implemented")
}
func (UnimplementedHostServer) UpdateBlog(context.Context, *UploadBlogReq) (*UploadBlogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlog not implemented")
}
func (UnimplementedHostServer) DeleteBlog(context.Context, *DeleteBlogReq) (*DeleteBlogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlog not implemented")
}
func (UnimplementedHostServer) UploadPic(context.Context, *UploadPicReq) (*UploadPicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPic not implemented")
}
func (UnimplementedHostServer) DeletePic(context.Context, *DeleteBlogReq) (*DeletePicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePic not implemented")
}
func (UnimplementedHostServer) mustEmbedUnimplementedHostServer() {}
func (UnimplementedHostServer) testEmbeddedByValue()              {}

// UnsafeHostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostServer will
// result in compilation errors.
type UnsafeHostServer interface {
	mustEmbedUnimplementedHostServer()
}

func RegisterHostServer(s grpc.ServiceRegistrar, srv HostServer) {
	// If the following call pancis, it indicates UnimplementedHostServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Host_ServiceDesc, srv)
}

func _Host_CreateBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadBlogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServer).CreateBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Host_CreateBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServer).CreateBlog(ctx, req.(*UploadBlogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Host_UpdateBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadBlogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServer).UpdateBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Host_UpdateBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServer).UpdateBlog(ctx, req.(*UploadBlogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Host_DeleteBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServer).DeleteBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Host_DeleteBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServer).DeleteBlog(ctx, req.(*DeleteBlogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Host_UploadPic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServer).UploadPic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Host_UploadPic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServer).UploadPic(ctx, req.(*UploadPicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Host_DeletePic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServer).DeletePic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Host_DeletePic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServer).DeletePic(ctx, req.(*DeleteBlogReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Host_ServiceDesc is the grpc.ServiceDesc for Host service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Host_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "host.Host",
	HandlerType: (*HostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBlog",
			Handler:    _Host_CreateBlog_Handler,
		},
		{
			MethodName: "UpdateBlog",
			Handler:    _Host_UpdateBlog_Handler,
		},
		{
			MethodName: "DeleteBlog",
			Handler:    _Host_DeleteBlog_Handler,
		},
		{
			MethodName: "UploadPic",
			Handler:    _Host_UploadPic_Handler,
		},
		{
			MethodName: "DeletePic",
			Handler:    _Host_DeletePic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "host.proto",
}
